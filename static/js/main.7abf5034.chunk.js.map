{"version":3,"sources":["const.js","components/Menu.jsx","components/LeftPanel.jsx","components/routes/Home.jsx","components/routes/ArrayComp.jsx","components/routes/NotFound.jsx","components/routes/SearchBar.jsx","components/routes/Photos.jsx","utils/fetch.js","components/routes/PhotosContainer.jsx","components/RightPanel.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["menus","id","name","path","Menu","className","map","item","exact","to","key","LeftPanel","React","Component","Home","ArrayComp","Notfound","queyval","SearchBar","state","searchValue","handleSearch","event","target","value","props","onSearch","setState","type","this","placeholder","onChange","Photos","data","console","log","hits","src","previewURL","height","width","tags","fetchPhotos","url","fetch","then","res","json","catch","error","PhotosContainer","query","photos","newProps","RightPanel","component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7abf5034.chunk.js","sourcesContent":["export const menus = [\n  {\n    id: 3,\n    name: \"Photos\",\n    path: \"/photos\"\n  },\n  {\n    id: 1,\n    name: \"Home\",\n    path: \"/\"\n  },\n  {\n    id: 2,\n    name: \"Array\",\n    path: \"/array-comp\"\n  }\n];\n","import React, { Fragment } from \"react\";\nimport { menus } from \"../const\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Menu = () => {\n  return (\n    <div className=\"menu\">\n      {menus &&\n        menus.map(item => {\n          return (\n            <NavLink exact to={item.path} className=\"menu-item\" key={item.id}>\n              {item.name}\n            </NavLink>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport Menu from \"./Menu\";\n\nclass LeftPanel extends React.Component {\n  render() {\n    return (\n      <div className=\"left-panel\">\n        <div className=\"left-header\">\n          <h3>Menu</h3>\n        </div>\n        <div className=\"left-body\">\n          <Menu />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LeftPanel;\n","import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div className=\"home\">\n      <h3>This is Home Page Yahooooo</h3>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst ArrayComp = () => {\n  return (\n    <div className=\"array-comp\">\n      <h3>This is Array Comp</h3>\n    </div>\n  );\n};\n\nexport default ArrayComp;\n","import React from \"react\";\nconst Notfound = () => <h3>Not found</h3>;\nexport default Notfound;\n","import React, { Component } from \"react\";\nimport API from \"../hoc/API\";\n\nlet queyval = \"\";\nclass SearchBar extends Component {\n  state = {\n    searchValue: \"\"\n  };\n\n  handleSearch = event => {\n    queyval = event.target.value;\n    this.props.onSearch(queyval);\n    this.setState({\n      searchValue: queyval\n    });\n  };\n  render() {\n    return (\n      <div className=\"searchBar\">\n        <input\n          type=\"text\"\n          className=\"inputSearch\"\n          value={this.state.searchValue}\n          placeholder=\"Search here....\"\n          onChange={this.handleSearch}\n        />\n      </div>\n    );\n  }\n}\nexport default SearchBar;\n","import React from \"react\";\nclass Photos extends React.Component {\n  state = {\n    data: \"\"\n  };\n  render() {\n    const { data } = this.props;\n    console.log(\"Photos- props\", this.props);\n    return (\n      <div className=\"photos-container\">\n        {data &&\n          data.hits &&\n          data.hits.map(item => {\n            return (\n              <div className=\"photo-item\" key={item.id}>\n                <img src={item.previewURL} height=\"200px\" width=\"300px\" />\n                <div className=\"image-desc\">\n                  <span>{item.tags}</span>\n                </div>\n              </div>\n            );\n          })}\n      </div>\n    );\n  }\n}\n\nexport default Photos;\n","export const fetchPhotos = value => {\n  let query = value ? value : \"\";\n  let url = `https://pixabay.com/api/?key=15392009-366715d9c5718905431daaa3d&pretty=true&image_type=photo&q=${query}`;\n  return fetch(url)\n    .then(res => res.json())\n    .catch(error => console.error(\" Something went wrong !\"));\n};\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport Photos from \"./Photos\";\nimport { fetchPhotos } from \"../../utils/fetch\";\n\nclass PhotosContainer extends React.Component {\n  state = {\n    query: \"\",\n    photos: \"\"\n  };\n\n  handleSearch = value => {\n    fetchPhotos(value).then(data => {\n      this.setState({\n        photos: data\n      });\n    });\n  };\n\n  componentDidMount() {\n    fetchPhotos().then(data => {\n      this.setState({\n        photos: data\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"photosContainer\">\n        <SearchBar newProps=\"Siju\" onSearch={this.handleSearch} />\n        <Photos data={this.state.photos} />\n      </div>\n    );\n  }\n}\n\nexport default PhotosContainer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"../components/routes/Home\";\nimport ArrayComp from \"./routes/ArrayComp\";\nimport Notfound from \"./routes/NotFound\";\nimport PhotosContainer from \"./routes/PhotosContainer\";\n\nclass RightPanel extends React.Component {\n  render() {\n    return (\n      <div className=\"right-panel\">\n        <div className=\"right-header\">\n          <h3>Hello</h3>\n        </div>\n        <div className=\"right-body\">\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/array-comp\" component={ArrayComp} />\n            <Route path=\"/photos\" component={PhotosContainer} />\n            <Route component={Notfound} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RightPanel;\n","import React from \"react\";\n\nconst Footer = () => <div className=\"footer\"></div>;\n\nexport default Footer;\n","import React from \"react\";\nimport LeftPanel from \"./components/LeftPanel\";\nimport RightPanel from \"./components/RightPanel\";\nimport Footer from \"./components/Footer\";\nimport \"./styles/style.scss\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Home from \"./components/routes/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <LeftPanel />\n        <RightPanel />\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}